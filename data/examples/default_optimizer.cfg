# Config for the SimBA Optimizer
# DEFAULT
# Level of debugging information that is printed to the .log file between.
# debug_level = 1 prints everything
debug_level = 1
# Level of debugging information that is printed in the console.
# console_level = 99 only prints critical information.
console_level = 99

#SCENARIO
# Use "" for ids and not ''.
# These rotations are excluded from optimization. They will not be simulated.
exclusion_rots = []

# These stations are excluded from optimization. optimization will not electrify them.
exclusion_stations = []
# Optimization will electrify these stations.
# if using inclusion stations, scenario should be rebased.
inclusion_stations = []
standard_opp_station = {"type": "opps", "n_charging_stations": null}
# rotations which drop below this value are considered not electrified (default value is 0).
min_soc = 0.05

#OPTIMIZER
# Choice between solver at the core of simulation.
# spiceev makes use of SpiceEV and is very robust and accurate.
# quick is a specifically for the optimization produced solver which is quick, but
# less accurate and with some assumptions that have to be met.
# "quick" or "spiceev"
solver = quick

# Optimization procedure is developed from the input schedule and scenario. If the scenario is changed
# through this configuration rebasing should be set to true. This will simulate the scenario again with the
# given settings.
rebase_scenario = False

# The rebased scenario can be pickled for analysis or repeated use.
pickle_rebased = False
# The name of this pickle file can be defined here.
pickle_rebased_name = ""
# Should all rotations be rebased or can rotations which stay above the soc threshold be skipped?
run_only_neg = False
# Should only be opportunity vehicles be rebased, since this optimization is not meant for depot chargers?
# The optimization will return ALL original rotations of the input in all cases.
run_only_oppb = True
# number of stations before optimal solution, where branch is checked for pruning.
pruning_threshold = 3

# Optimization type greedy runs the optimization a single time as greedy as impossible
# Deep repeatedly searches for promising nodes but only new nodes which have not been checked before.
# "greedy" or "deep" without "".
opt_type = greedy

# For Deep optimization only:
#############################
# How should the deep optimization choose the nodes.
# Brute is only recommended in smaller systems.
# "step-by-step" or "brute" without "".
node_choice = step-by-step
# How many combinations is the deep method allowed to check?
max_brute_loop = 300
# Factor with which the potential evaluation is multiplied before comparing it to the missing energy. A low estimation
# threshold will lead to a more conservative approach in dismissing branches.
estimation_threshold = 0.80


# Removing impossible rotations leads to a quick calculation estimating if rotations are impossible.
# If they are deemed as impossible, they are not optimized but discarded during optimization.
# The optimization will return ALL original rotations of the input in all cases.
remove_impossible_rotations = True
# Check if stations are mandatory for a fully electrified system. If they are, include them.
check_for_must_stations = False



#SPECIAL
#Optional and in development: Path to pickle file of decision_tree.
decision_tree_path = ""
#Optional and in development: Should the decision tree be save
save_decision_tree = False
# Do you want to reduce the rotations to a smaller subset?
reduce_rotations = False
# Only use these rotations for optimization
rotations = []

